version: "3.8"

services:
  # API Service
  api:
    build: .
    image: notification-service-api
    container_name: notification-api
    command: gunicorn --config gunicorn.conf.py app:app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://mongodb:27017/
      - MONGODB_DATABASE=notification_service
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_QUEUE=notifications
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - LOG_LEVEL=WARNING
      - GUNICORN_WORKERS=4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      - mongodb
      - rabbitmq
    networks:
      - notification-network

  # Consumer Service
  consumer:
    build: .
    image: notification-service-consumer
    container_name: notification-consumer
    command: python consumer.py
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - MONGODB_URI=mongodb://mongodb:27017/
      - MONGODB_DATABASE=notification_service
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_QUEUE=notifications
      - LOG_LEVEL=WARNING
    depends_on:
      - mongodb
      - rabbitmq
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.50"
          memory: 256M
    networks:
      - notification-network

  # MongoDB Service with authentication
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=notification_service
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/notification_service --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - notification-network

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management interface port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - notification-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    depends_on:
      - api
      - consumer
    networks:
      - notification-network

networks:
  notification-network:
    driver: bridge

volumes:
  mongodb_data:
  rabbitmq_data:
  prometheus_data:
